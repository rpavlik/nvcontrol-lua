#!/usr/bin/env lua
require("nvcontrol.framelock")

--[[
Original author: Ryan Pavlik <rpavlik@iastate.edu> <abiryan@ryand.net>
http://academic.cleardefinition.com

//          Copyright Iowa State University 2011.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

]]

--[[ Determine what config file to use. ]]
local configFn = os.getenv("HOME") .. "/.framelocker.conf.lua"
local args = {}
for _, arg in ipairs{...} do
	if arg:find(".lua$") then
		configFn = arg
	else
		table.insert(args, arg)
	end
end

--[[ Load the config file, and remove references to our hostname for efficiency ]]
print("Loading config file " .. configFn)
local configFile, err = io.open(configFn, "r")
if not configFile then
	error("Could not open config file " .. configFn .. " - got error " .. tostring(err), 2)
end

local myhost = os.getenv("HOST")
local configString = configFile:read("*a"):gsub(myhost, "")
configFile:close()
configChunk, err = loadstring(configString)
if not configChunk then
	error("Could not load config file as Lua! Got error " .. err)
end

--[[ Run the config file in a restricted environment ]]
local config = {XScreen = nvcontrol.XScreen}
setfenv(configChunk, config)
configChunk()

if type(config.masters) ~= "table" or #(config.masters) < 1 then
	error("Config file needs to specify a table named masters containing at least one screen!")
end
if type(config.nonmasters) ~= "table" or #(config.nonmasters) < 1 then
	error("Config file needs to specify a table named nonmasters containing at least one screen!")
end

--[[ Handle command line ]]
commands = {
	on = nvcontrol.framelock.enable;
	off = nvcontrol.framelock.disable;
}

local function doCommand(command)
	if commands[command] == nil then
		error("Unrecognized framelocker command: " .. command)
	end
	print()
	print("***")
	print("Running framelocker command: " .. command)
	print("***")
	print()
	-- Perform the requested command
	commands[command](config.masters, config.nonmasters)
end

if #args == 0 then
	-- default command
	doCommand("on")
else
	for _, command in ipairs(args) do
		doCommand(command)
	end
end


